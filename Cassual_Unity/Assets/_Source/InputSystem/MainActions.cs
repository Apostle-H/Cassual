//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Source/InputSystem/MainActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputSystem
{
    public partial class @MainActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MainActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainActions"",
    ""maps"": [
        {
            ""name"": ""Crowd"",
            ""id"": ""9cb4a957-fd19-4ade-8fef-80ef48b66d05"",
            ""actions"": [
                {
                    ""name"": ""SetDestination"",
                    ""type"": ""Button"",
                    ""id"": ""a8edc037-d479-43f6-ad6e-a9c0f83c4a93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Destination"",
                    ""type"": ""Value"",
                    ""id"": ""1647187e-1b1c-44bb-a3b6-fc09e19603f1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""88ade68a-fbf0-4842-a70f-b2be7a2bb1c9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetDestination"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44b1f8a0-4df1-4387-ae15-e500df4f5bee"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destination"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Buildings"",
            ""id"": ""9bb571c5-ed77-493a-a27a-3c276a5784b7"",
            ""actions"": [
                {
                    ""name"": ""SetUpCamp"",
                    ""type"": ""Button"",
                    ""id"": ""d98a36e1-9a30-415a-a7d6-2fb6fbc9fe94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""182dd237-6254-47e4-b9c5-ba1159dbe1a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ff437b83-d8cf-4fb1-87eb-f5839be13529"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetUpCamp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46a152b8-57a7-4a08-84bd-7f5c657226da"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Crowd
            m_Crowd = asset.FindActionMap("Crowd", throwIfNotFound: true);
            m_Crowd_SetDestination = m_Crowd.FindAction("SetDestination", throwIfNotFound: true);
            m_Crowd_Destination = m_Crowd.FindAction("Destination", throwIfNotFound: true);
            // Buildings
            m_Buildings = asset.FindActionMap("Buildings", throwIfNotFound: true);
            m_Buildings_SetUpCamp = m_Buildings.FindAction("SetUpCamp", throwIfNotFound: true);
            m_Buildings_Position = m_Buildings.FindAction("Position", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Crowd
        private readonly InputActionMap m_Crowd;
        private ICrowdActions m_CrowdActionsCallbackInterface;
        private readonly InputAction m_Crowd_SetDestination;
        private readonly InputAction m_Crowd_Destination;
        public struct CrowdActions
        {
            private @MainActions m_Wrapper;
            public CrowdActions(@MainActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @SetDestination => m_Wrapper.m_Crowd_SetDestination;
            public InputAction @Destination => m_Wrapper.m_Crowd_Destination;
            public InputActionMap Get() { return m_Wrapper.m_Crowd; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CrowdActions set) { return set.Get(); }
            public void SetCallbacks(ICrowdActions instance)
            {
                if (m_Wrapper.m_CrowdActionsCallbackInterface != null)
                {
                    @SetDestination.started -= m_Wrapper.m_CrowdActionsCallbackInterface.OnSetDestination;
                    @SetDestination.performed -= m_Wrapper.m_CrowdActionsCallbackInterface.OnSetDestination;
                    @SetDestination.canceled -= m_Wrapper.m_CrowdActionsCallbackInterface.OnSetDestination;
                    @Destination.started -= m_Wrapper.m_CrowdActionsCallbackInterface.OnDestination;
                    @Destination.performed -= m_Wrapper.m_CrowdActionsCallbackInterface.OnDestination;
                    @Destination.canceled -= m_Wrapper.m_CrowdActionsCallbackInterface.OnDestination;
                }
                m_Wrapper.m_CrowdActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @SetDestination.started += instance.OnSetDestination;
                    @SetDestination.performed += instance.OnSetDestination;
                    @SetDestination.canceled += instance.OnSetDestination;
                    @Destination.started += instance.OnDestination;
                    @Destination.performed += instance.OnDestination;
                    @Destination.canceled += instance.OnDestination;
                }
            }
        }
        public CrowdActions @Crowd => new CrowdActions(this);

        // Buildings
        private readonly InputActionMap m_Buildings;
        private IBuildingsActions m_BuildingsActionsCallbackInterface;
        private readonly InputAction m_Buildings_SetUpCamp;
        private readonly InputAction m_Buildings_Position;
        public struct BuildingsActions
        {
            private @MainActions m_Wrapper;
            public BuildingsActions(@MainActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @SetUpCamp => m_Wrapper.m_Buildings_SetUpCamp;
            public InputAction @Position => m_Wrapper.m_Buildings_Position;
            public InputActionMap Get() { return m_Wrapper.m_Buildings; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BuildingsActions set) { return set.Get(); }
            public void SetCallbacks(IBuildingsActions instance)
            {
                if (m_Wrapper.m_BuildingsActionsCallbackInterface != null)
                {
                    @SetUpCamp.started -= m_Wrapper.m_BuildingsActionsCallbackInterface.OnSetUpCamp;
                    @SetUpCamp.performed -= m_Wrapper.m_BuildingsActionsCallbackInterface.OnSetUpCamp;
                    @SetUpCamp.canceled -= m_Wrapper.m_BuildingsActionsCallbackInterface.OnSetUpCamp;
                    @Position.started -= m_Wrapper.m_BuildingsActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_BuildingsActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_BuildingsActionsCallbackInterface.OnPosition;
                }
                m_Wrapper.m_BuildingsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @SetUpCamp.started += instance.OnSetUpCamp;
                    @SetUpCamp.performed += instance.OnSetUpCamp;
                    @SetUpCamp.canceled += instance.OnSetUpCamp;
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                }
            }
        }
        public BuildingsActions @Buildings => new BuildingsActions(this);
        public interface ICrowdActions
        {
            void OnSetDestination(InputAction.CallbackContext context);
            void OnDestination(InputAction.CallbackContext context);
        }
        public interface IBuildingsActions
        {
            void OnSetUpCamp(InputAction.CallbackContext context);
            void OnPosition(InputAction.CallbackContext context);
        }
    }
}
